编译类：编译是指在应用源程序执行之前，就将程序源代码"翻译"成目标代码（机器语言）
因此其目标程序可以脱离其语言环境独立执行(编译后生成的可执行文件，是cpu可以理解的2进制的机器码组成的)
使用比较方便、效率较高。

解释类：执行方式类似于我们日常生活中的"同声翻译"
应用程序源代码一边由相应语言的解释器"翻译"成目标代码（机器语言）一边执行
因此效率比较低，而且不能生成可独立执行的可执行文件
应用程序不能脱离其解释器(想运行，必须先装上解释器，就像跟老外说话，必须有翻译在场)
但这种方式比较灵活，可以动态地调整、修改应用程序。如Python、Java、PHP、Ruby等语言。


总结：
编译型语言：把做好的源程序全部编译成二进制代码的可运行程序。然后，可直接运行这个程序。
编译型语言，执行速度快、效率高；依靠编译器、跨平台性差。
编译型的语言包括：C、C++

解释型语言：把做好的源程序翻译一句，然后执行一句，直至结束！
解释型语言，执行速度慢、效率低；依靠解释器、跨平台性好。
解释型的语言包括：python，java，go

python单行注释 #
python多行注释 """ """

布尔值分别是 True False 用于逻辑运算，是逻辑运算返回的唯一结果。

变量名定义规则：
变量名只能是 字母、数字或下划线的任意组合
变量名的第一个字符不能是数字
以下关键字不能声明为变量名
["and", "as", "assert", "break", "class", "continue",
"def", "del", "elif", "else", "except", "exec", "finally",
"for", "from", "global", "if", "import", "in", "is",
"lambda", "not", "or", "pass", "print", "raise", "return",
"try", "while", "with", "yield"]

and逻辑运算  判断多个条件均为真，则返回True 否则返回False
or 逻辑运算  判断多个条件任意条件为真，则返回True 否则返回False
not 逻辑运算  判断条件返回结果不为真， 则返回True 否则返回False
